{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","e","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAceA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE1B,OACE,yBAAKC,UAAU,sDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACE,4BAAKF,GACN,2BAAIC,MCwBMK,EA9BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAYf,OACA,6BAGIA,EAAOC,KAAI,SAACC,EAAMC,GACrB,OACA,kBAAC,EAAD,CACDC,IAAKF,EAAKP,GACTA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCNPW,EAhBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKV,UAAU,OACjB,2BAAOA,UAAU,wCAChBW,KAAO,SACPC,YAAa,4BACXC,SAAUH,MCEAI,EARA,SAACC,GAChB,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAASC,OAAQ,UACtCH,EAAMI,WCgBIC,E,YAlBT,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,8CAEFG,KAAKV,MAAMI,a,GAhBCQ,aCgDZC,G,kBA1Cb,aAAe,IAAD,8BACZ,+CAaFC,eAAiB,SAACC,GAClB,EAAKJ,SAAS,CAAEK,YAAaD,EAAEE,OAAOC,SAbpC,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAAEtB,OAAQkC,S,+BAOlC,IAAD,EAC2Bb,KAAKJ,MAA7BjB,EADH,EACGA,OAAQ2B,EADX,EACWA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACnC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAQtC,EAAOwC,OAGX,yBAAK5C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACF,kBAAC,EAAD,CAAUzB,OAAQmC,OAPtB,yD,GAzBgBZ,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACT,kBAAC,EAAD,MAAOC,SAASC,eAAe,SDyHzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.77c94c22.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = ({name, email, id}) => {\r\n  \r\n  return (\r\n    <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n    <img alt='robots' src={`https://robohash.org/${id}?250x250`}/>\r\n    <div>\r\n      <h2>{name}</h2>\r\n     <p>{email}</p> \r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n  \r\n    /*const cardArray = robots.map((user, i)=>{\r\n     return (\r\n     <Card \r\n    key={user.id}\r\n     id={robots[i].id} \r\n     name={robots[i].name} \r\n     email={robots[i].email}\r\n      /> \r\n     );\r\n    });*/\r\n    return (\r\n    <div>\r\n    {\r\n      // {cardArray} \r\n        robots.map((user, i)=>{\r\n     return (\r\n     <Card \r\n    key={user.id}\r\n     id={robots[i].id} \r\n     name={robots[i].name} \r\n     email={robots[i].email}\r\n      /> \r\n     );\r\n    })    \r\n   }\r\n    </div>\r\n  );\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n  <input className='w5 pa3 ba b--black bg-lightest-purple'\r\n   type = 'search'\r\n   placeholder= 'search robot friends here' \r\n     onChange={searchChange}\r\n   />\r\n\r\n   </div>\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n  <div style={{ overflow: 'scroll',height: '800px' }}>\r\n    {props.children}\r\n  </div> \r\n\r\n );\r\n};\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          hasError: false\r\n        }\r\n      }\r\n\r\n      componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n      }\r\n\r\n      render() {\r\n        if (this.state.hasError) {\r\n          return <h1>error occured!</h1>\r\n        }\r\n        return this.props.children\r\n      }\r\n}\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport'./App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: '' \r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(users => {this.setState({ robots: users})});\r\n    \r\n  }\r\n  onSearchChange = (e) => {\r\n  this.setState({ searchfield: e.target.value });\r\n  \r\n}\r\nrender() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n  })\r\n  return !robots.length ?\r\n  <h1>Please Waite! Loading</h1> :\r\n      (\r\n      <div className='tc'>\r\n      <h1 className='f1'>RoboFriends</h1>\r\n      <SearchBox searchChange={this.onSearchChange}/>\r\n      <Scroll>\r\n        <ErrorBoundry>\r\n      <CardList robots={filteredRobots}/>\r\n        </ErrorBoundry>\r\n      </Scroll>\r\n      </div>\r\n  \r\n     );\r\n\r\n  }\r\n  \r\n  }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n<App/>,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}